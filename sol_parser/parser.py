"""Summary
Parser class for csv files generated by the Scouts Online (SOL) program provided. y the Dutch Scouts Organisation; Scouting NL.

Class contains functions to calculate the current age and the age at a 'turnover' date; when a certain age is reached at the the turnover date the scout has to migrate to the next group.
"""
from datetime import date
from datetime import *
from dateutil.relativedelta import relativedelta


class Parser():

    """Summary

    Attributes:
        tdate (TYPE): Calculated turnover date
        objLeden (TYPE): Dictionary containig all members from csvfile
    """

    def __init__(self, csvfile):
        """Summary

        Args:
            csvfile (TYPE): Input file to parse (csv format)
        """
        self.objLeden = dict()
        self.chk_date = turnover_date()

        with open(csvfile) as csvfile:
            try:
                reader = csv.DictReader(csvfile)
                for row in reader:
                    # Add current age
                    row = add2ages(row)
                    # Add row to dict
                    objLeden[row['Lidnummer']] = row
            finally:
                csvfile.close()

    def add2ages(self,d):
        bd = d['Lid_geboortedatum']
        
        row['leeftijd'] = calculate_age(bd, date.today())
        # Add age at turnover date
        row['chk_leeftijd'] = calculate_age(bd, self.chk_date)

    def turnover_date(self):
        """Summary

        Returns:
            TYPE: Description
        """
        # setup date for checking age
        today = date.today()
        if today.month >= 9 and today.day >= 1:
            # replace day and month for given values
            # Increases current year with 1
            turnover_date = today + \
                relativedelta(day=1, month=9, years=1)
        else:
            # replace day and month for given values
            # Keeps the year equal to he current year
            turnover_date = today + relativedelta(day=1, month=9)

        return turnover_date


    def filter_age(self, age):
        """Summary

        Returns:
            TYPE: Description
        """
        filtered = dict()
        count = 0

        for y in self.objLeden:
            if self.objLeden[y]['chk_leeftijd'] >= age and self.objLeden[y]['Functie'] == "jeugdlid *":
                count = count+1
                filtered[self.objLeden[y]['Lidnummer']] = self.objLeden[y]
        return filtered, count
